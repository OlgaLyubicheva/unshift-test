{"version":3,"sources":["components/HomePage.js","components/loadingData.js","components/store.js","components/Post.js","components/PostList.js","components/NewPost.js","components/PostPage.js","App.js","index.js"],"names":["HomePage","loadData","url","a","fetch","response","json","data","sendData","method","value","headers","body","JSON","stringify","loadPosts","posts","loadPostWhithComments","postId","post","addPosts","delPost","updatePost","loadingCom","type","getPosps","state","getComments","comments","action","filter","id","comment","store","createStore","withRouter","history","to","title","onClick","push","connect","dispatch","savePosts","loadingPosts","useEffect","then","map","key","currentPost","updPost","upd","useState","setPost","handleChange","event","target","name","onSubmit","e","preventDefault","placeholder","onChange","postWhithComm","saveCom","match","location","params","length","hash","App","exact","path","component","PostPage","PostList","NewPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.089c1ac9.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => (\n  <div>\n    Home\n  </div>\n);\n\nexport default HomePage;\n","const loadData = async (url) => {\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n};\n\nconst sendData = async (url, method, value) => {\n  const response = await fetch(\n    url,\n    {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: value ? JSON.stringify(value) : null\n    });\n\n  const data = await response.json();\n  return data;\n};\n\nconst url = 'https://bloggy-api.herokuapp.com/';\n\nexport const loadPosts = async () => {\n  const posts = await loadData(`${url}posts`);\n\n  return posts;\n};\n\nexport const loadPostWhithComments = async (postId) => {\n  const post = await loadData(`${url}posts/${postId}?_embed=comments`);\n\n  return post;\n};\n\n\nexport const addPosts = async (value) => {\n  const post = await sendData(`${url}posts`, 'POST', value);\n\n  return post;\n};\n\nexport const delPost = async (postId) => {\n  const post = await sendData(`${url}posts/${postId}`, 'DELETE');\n\n  return post;\n};\n\nexport const updatePost = async (postId, value) => {\n  const post = await sendData(`${url}posts/${postId}`, 'PUT', value);\n\n  return post;\n};\n\nexport const addComment = async (value) => {\n  const comment = await sendData(`${url}comments`, 'POST', value);\n\n  return comment;\n};","import { createStore } from 'redux';\n\n// action types\nconst LOADING_POST = 'loading_posts';\nconst LOADING_COM = 'loading_comments';\nconst DELETE_POST = 'delete_post';\nconst DELETE_COM = 'delete_comment';\n\n// action creators\nexport const loadingPosts = value => ({ type: LOADING_POST, value });\nexport const loadingCom = value => ({ type: LOADING_COM, value });\nexport const delPost = value => ({ type: DELETE_POST, value });\nexport const delCom = value => ({ type: DELETE_COM, value });\n\n// selectors\nexport const getPosps = state => state.posts;\nexport const getComments = state => state.comments;\n\n// reducer\n\nconst posts = (state = [], action) => {\n  switch (action.type) {\n    case LOADING_POST:\n      return action.value;\n    case DELETE_POST:\n      return state.filter(post => post.id !== action.value);\n    default:\n      return state;\n  }\n};\n\nconst comments = (state = [], action) => {\n  switch (action.type) {\n    case LOADING_COM:\n      return action.value;\n    case DELETE_COM:\n      return state.filter(comment => comment.id !== action.value);\n    default:\n      return state;\n  }\n};\n\nconst reducer = (state = {}, action) => ({\n  posts: posts(state.posts, action),\n  comments: comments(state.comments, action),\n});\n\nconst store = createStore(reducer);\n\nexport default store;\n","import React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nconst Post = ({ post, history }) => (\n  <div>\n    <Link to={`posts/${post.id}?_embed=comments`}>\n      <h2>{post.title}</h2>\n    </Link>\n    <p>{post.body}</p>\n    \n    <button \n      type=\"button\"\n      onClick={() => history.push(`posts/${post.id}?_embed=comments#update`)}\n    >\n      Change\n    </button>\n    <button\n      type=\"button\"\n      onClick={() => history.push(`posts/${post.id}?_embed=comments`)}\n    >\n      Delete\n    </button>\n  </div>\n);\n\nexport default withRouter(Post);\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadPosts } from './loadingData';\nimport { loadingPosts, getPosps } from './store';\n\nimport Post from './Post';\n\nconst PostList = ({ posts, savePosts }) => {\n  useEffect(() => {\n    loadPosts().then(data => savePosts(data));\n  });\n\n  return (\n    <div>\n      {\n        posts.map(post => (\n          <Post post={post} key={post.id} />\n        ))\n      }\n    </div>\n  );\n};\n\nPostList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    id: PropTypes.number,\n  })).isRequired,\n  savePosts: PropTypes.func.isRequired,\n};\n\nconst getData = state => ({\n  posts: getPosps(state),\n});\n\nconst getMethods = dispatch => ({\n  savePosts: value => dispatch(loadingPosts(value)),\n});\n\nexport default connect(getData, getMethods)(PostList);\n","import React, { useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { addPosts, updatePost, loadPostWhithComments } from './loadingData';\nimport { loadingCom, getComments } from './store';\n\nconst NewPost = ({ history, upd, currentPost, updPost }) => {\n  const [post, setPost] = useState({ title: currentPost.title, body: currentPost.body });\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setPost({\n      ...post,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!upd) {\n      addPosts(post);\n      setPost({ title: '', body: '' });\n    } else {\n      updatePost(currentPost.id, post);\n      loadPostWhithComments(currentPost.id).then(data => updPost(data));\n      history.push(`/posts/${currentPost.id}?_embed=comments`);\n    }\n  }\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"Enter title of post\"\n          name=\"title\"\n          value={post.title}\n          onChange={event => handleChange(event)}\n        />\n      </div>\n      <div>\n        <textarea\n          placeholder=\"Write a post\"\n          name=\"body\"\n          value={post.body}\n          onChange={event => handleChange(event)}\n        />\n      </div>\n\n      {\n        !upd\n        ? <button type=\"submit\">Create post</button>\n        : <button type=\"submit\">Update post</button>\n      }\n      \n    </form>\n  );\n};\n\nconst getData = state => ({\n  currentPost: getComments(state),\n});\n\nconst getMethods = dispatch => ({\n  updPost: value => dispatch(loadingCom(value)),\n});\n\nexport default connect(getData, getMethods)(withRouter(NewPost));\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { loadPostWhithComments, delPost } from './loadingData';\nimport { loadingCom, getComments } from './store';\nimport NewPost from './NewPost';\n\n\nconst PostPage = ({ match, location, history, saveCom, postWhithComm }) => {\n  useEffect(() => {\n    loadPostWhithComments(match.params.postId).then(data => saveCom(data));\n  }\n  );\n\n  return (\n    <div>\n      <h1>{postWhithComm.title}</h1>\n      <p>{postWhithComm.body}</p>\n\n      <div>\n        <h2>Comments</h2>\n        {\n          postWhithComm.length !== 0\n            ? postWhithComm.comments.map(comment => (\n              <div>{comment.body}</div>\n            ))\n            : ''\n        }\n      </div>\n\n      {\n        location.hash === '#update' && (\n        postWhithComm.length !== 0) && (\n        <div id=\"update\">\n          <NewPost upd />\n        </div>)\n      }\n\n    {\n      location.hash !== '#update' && (\n      <button \n        type=\"button\"\n        onClick={() => history.push(`/posts/${postWhithComm.id}?_embed=comments#update`)}\n      >\n        Change\n      </button>)\n    }\n    <button\n      type=\"button\"\n      onClick={() => { delPost(postWhithComm.id); history.push('/posts') }}\n    >\n      Delete\n    </button>\n    </div>\n  );\n};\n\nconst getData = state => ({\n  postWhithComm: getComments(state),\n});\n\nconst getMethods = dispatch => ({\n  saveCom: value => dispatch(loadingCom(value)),\n});\n\nexport default connect(getData, getMethods)(PostPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink, Switch, Route } from 'react-router-dom';\nimport HomePage from './components/HomePage';\nimport PostList from './components/PostList';\nimport PostPage from './components/PostPage';\nimport NewPost from './components/NewPost';\n\nconst App = () => {\n  return (\n    <div>\n      <header>\n        <nav>\n          <ul>\n            <li>\n              <NavLink\n                to=\"/\"\n                exact\n              >\n                Home\n              </NavLink>\n            </li>\n\n            <li>\n              <NavLink to=\"/posts\">\n                Posts\n              </NavLink>\n            </li>\n\n            <li>\n              <NavLink to=\"/newpost\">\n                New post\n              </NavLink>\n            </li>\n          </ul>\n        </nav>\n      </header>\n\n      <Switch>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/posts/:postId\" component={PostPage} />\n        <Route path=\"/posts\" component={PostList} />\n        <Route path=\"/newpost\" component={NewPost} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './components/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}